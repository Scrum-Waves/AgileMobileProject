//import 'dart:html';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
//import 'package:gallery_saver/gallery_saver.dart';
/*import 'package:image_downloader/image_downloader.dart'; 329*/
import 'package:share_plus/share_plus.dart';
//import 'package:screenshot/screenshot.dart';
//import 'package:flutter_spinkit/flutter_spinkit.dart';
import 'package:universal_html/html.dart' as html;

import '../../../global/constants/utils/color_palette.dart';
import '../../../global/constants/routes/routes.dart';
import '../../../services/ai/GPT3/image/api_services.dart';


class ImageGenScreen extends StatefulWidget {
  const ImageGenScreen({super.key});

  @override
  State<ImageGenScreen> createState() => _ImageGenScreenState();
}

class _ImageGenScreenState extends State<ImageGenScreen> {
  var sizes = ["Small", "Medium", "Large"];
  var values = ["256x256", "512x512", "1024x1024"];
  String? dropValue;
  var textController = TextEditingController();
  String imageUrl = '';
  var isLoaded = false;
  var isProgress = false;

  // Extra screenchoot
  /*ScreenshotController screenshotController = ScreenshotController();*/

  // Extra screenchoot
  /*shareImage() async {
    await screenshotController
        .capture(delay: Duration(milliseconds: 100), pixelRatio: 1.0)
        .then((Uint8List? img) async {
      if (img != null) {
        final directory = (await getApplicationDocumentsDirectory()).path;
        final filename = "share.png";
        /*dart:io not dart:html */
        final imgpath = File("$directory/$filename");
        await imgpath.writeAsBytes(img);

        Share.shareFiles([imgpath.path], text: "Generated by: jedidi.me");
      } else {
        print("Failed to take a screenshot");
      }
    });
  }*/

  // Extra screenchoot
  /*downloadImage() async {
    var result = await Permission.storage.request();

    if (result.isGranted) {

      //const foldername = "AIimage";
      //final path1 = Directory("storage/emulated/0/$foldername");

      final Dir = await getTemporaryDirectory() ;
      final path = Directory(Dir.path);


      final filename = "${DateTime.now().microsecondsSinceEpoch}.png";

      if (!await path.exists()) {
        await path.create(recursive: true);
      }

      //Extra screenshot
      await screenshotController.captureAndSave(path.path,
      delay: const Duration(milliseconds: 100),
        fileName: filename,
          pixelRatio: 1.0);

      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text("Downloaded to ${path.path}!")));
      final temppath = '${path.path}/${filename}';

      await GallerySaver.saveImage(temppath);
      //Only link from Internet
      //await ImageDownloader.downloadImage(temppath);
    } else {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text("Permission denied!")));
    }
  }*/

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor:
          (Theme.of(context).brightness.name == Brightness.light.name)
              ? Colors.white
              : Color.fromRGBO(23, 35, 29, 1.0),
      resizeToAvoidBottomInset: false,
      appBar: AppBar(
        centerTitle: true,
        title: const Text(
          'AI Image Generator',
          style: TextStyle(
              fontFamily: "Montserrat",
              fontWeight: FontWeight.w600,
              color: Colors.white),
        ),
        leading: IconButton(
          icon: const Icon(
            Icons.arrow_back,
          ),
          onPressed: () {
            Navigator.of(context).popAndPushNamed(Routes.todo_page);
          },
        ),
      ),
      body: Padding(
        padding: EdgeInsets.all(8.0),
        child: Column(
          children: [
            Expanded(
                child: SingleChildScrollView(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.spaceAround,
                children: [
                  Row(
                    children: [
                      Expanded(
                          child: Container(
                        height: 44,
                        padding: EdgeInsets.symmetric(
                            horizontal: 16.0, vertical: 0.0),
                        decoration: BoxDecoration(
                            boxShadow: [
                              BoxShadow(
                                  offset: Offset(0, 3),
                                  blurRadius: 5,
                                  color: (Theme.of(context).brightness.name ==
                                          Brightness.light.name)
                                      ? Color.fromRGBO(218, 218, 218, 0.8)
                                      : Colors.black45)
                            ],
                            borderRadius: BorderRadius.circular(12.0),
                            color: Colors.white),
                        child: TextFormField(
                          style: TextStyle(color: Colors.black87),
                          controller: textController,
                          decoration: InputDecoration(
                              hintText: "eg: 'Astronout in the moon' ",
                              hintStyle: TextStyle(color: Colors.black54),
                              border: InputBorder.none),
                        ),
                      )),
                      const SizedBox(width: 12.0),
                      Container(
                        height: 44,
                        padding:
                            EdgeInsets.symmetric(horizontal: 8, vertical: 2),
                        decoration: BoxDecoration(
                          boxShadow: [
                            BoxShadow(
                                offset: Offset(0, 3),
                                blurRadius: 5,
                                color: (Theme.of(context).brightness.name ==
                                        Brightness.light.name)
                                    ? Colors.grey
                                    : Colors.black45)
                          ],
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(12.0),
                        ),
                        child: DropdownButtonHideUnderline(
                            child: DropdownButton(
                          dropdownColor: Colors.white,
                          icon: Icon(Icons.expand_more /*, color: btnColor*/),
                          value: dropValue,
                          style: TextStyle(color: Colors.black54),
                          hint: Text(
                            "Select size",
                            style: TextStyle(color: Colors.black54),
                          ),
                          items: List.generate(
                              sizes.length,
                              (index) => DropdownMenuItem(
                                    child: Text(
                                      sizes[index],
                                      style: TextStyle(color: Colors.black54),
                                    ),
                                    value: values[index],
                                  )),
                          onChanged: (value) {
                            setState(() {
                              dropValue = value.toString();
                            });
                          },
                        )),
                      )
                    ],
                  ),
                  Container(
                      margin: EdgeInsets.only(top: 10, bottom: 5),
                      width: 300,
                      height: 38,
                      child: ElevatedButton(
                          style: ElevatedButton.styleFrom(
                              /*foregroundColor:
                                  Theme.of(context).appBarTheme.foregroundColor,*/
                              /*backgroundColor: btnColor,*/ backgroundColor:
                                  (Theme.of(context)
                                              .appBarTheme
                                              .backgroundColor ==
                                          Colors.deepPurple)
                                      ? Colors.deepPurpleAccent
                                      : Theme.of(context)
                                          .appBarTheme
                                          .backgroundColor,
                              shape: StadiumBorder()),
                          onPressed: () async {
                            setState(() {
                              isProgress = true;
                              isLoaded = false;
                            });
                            if (textController.text.isNotEmpty &&
                                (dropValue == "256x256" ||
                                    dropValue == "512x512" ||
                                    dropValue == "1024x1024")) {
                              imageUrl = await ApiServices.GenerateImage(
                                  textController.text.toString(), dropValue!);
                              setState(() {
                                isLoaded = true;
                                isProgress = false;
                              });
                            } else {
                              setState(() {
                                isProgress = false;
                              });

                              ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                                  content: Text(
                                      "Input description and select a size!")));
                            }
                          },
                          child: Text("Generate",
                              style: TextStyle(fontWeight: FontWeight.bold))))
                ],
              ),
            )),
            Expanded(
              flex: 4,
              child: isLoaded
                  ? Container(
                      alignment: Alignment.center,
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(12.0),
                        color: chatBgColor,
                      ),
                      child: SingleChildScrollView(
                          child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Container(
                            margin: EdgeInsets.all(12.0),
                            clipBehavior: Clip.antiAlias,
                            decoration: BoxDecoration(
                                borderRadius: BorderRadius.circular(12)),
                            child: // Extra screenchoot
                                /*Screenshot(
                              controller: screenshotController,
                              child: */
                                Image.network(
                              imageUrl,
                              fit: BoxFit.contain,
                            ),
                          ),
                          // Extra screenchoot
                          /* ),*/
                        ],
                      )))
                  : Container(
                      alignment: Alignment.center,
                      decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(12.0),
                          color: chatBgColor),
                      child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          crossAxisAlignment: CrossAxisAlignment.center,
                          children: [
                            /*SpinKitPouringHourGlass(color: Colors.white)*/
                            isProgress
                                ? CircularProgressIndicator(color: Colors.white)
                                : SizedBox()
                          ]),
                    ),
            ),
            Expanded(
              child: Column(
                  mainAxisAlignment: MainAxisAlignment.spaceAround,
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        Expanded(
                          child: SizedBox(
                              height: 44,
                              child: ElevatedButton.icon(
                                  icon: Icon(Icons.download),
                                  style: ElevatedButton.styleFrom(
                                      padding: EdgeInsets.all(8),
                                      /*foregroundColor: Theme.of(context)
                                          .appBarTheme
                                          .foregroundColor,*/
                                      /*backgroundColor: btnColor*/ backgroundColor:
                                          (Theme.of(context)
                                                      .appBarTheme
                                                      .backgroundColor ==
                                                  Colors.deepPurple)
                                              ? Colors.deepPurpleAccent
                                              : Theme.of(context)
                                                  .appBarTheme
                                                  .backgroundColor),
                                  onPressed: () async {
                                    if (imageUrl != '') {
                                      if (!kIsWeb) {
                                        // Extra screenchoot // to cache the save
                                        /*downloadImage();*/
                                        //Android from Internet
                                        /*await ImageDownloader.downloadImage(
                                            imageUrl);*/
                                      } else if (kIsWeb) {
                                        //Web
                                        downloadFile(imageUrl.toString());
                                      }

                                      ScaffoldMessenger.of(context)
                                          .showSnackBar(SnackBar(
                                              content: Text(
                                                  "Image Downloaded successfully!")));
                                    } else {
                                      ScaffoldMessenger.of(context)
                                          .showSnackBar(SnackBar(
                                              content: Text(
                                                  "Generate an image first!")));
                                    }
                                  },
                                  label: Text("Download"))),
                        ),
                        SizedBox(width: 12),
                        SizedBox(
                            height: 44,
                            child: ElevatedButton.icon(
                                icon: Icon(Icons.share),
                                style: ElevatedButton.styleFrom(
                                    padding: EdgeInsets.all(8),
                                    /*foregroundColor: Theme.of(context)
                                        .appBarTheme
                                        .foregroundColor,*/
                                    /*backgroundColor: btnColor*/ backgroundColor:
                                        (Theme.of(context)
                                                    .appBarTheme
                                                    .backgroundColor ==
                                                Colors.deepPurple)
                                            ? Colors.deepPurpleAccent
                                            : Theme.of(context)
                                                .appBarTheme
                                                .backgroundColor),
                                onPressed: () {
                                  if (imageUrl != '') {
                                    Share.share(imageUrl.toString(),
                                        subject:
                                            textController.text.toString());
                                    // Extra screenchoot
                                    /*shareImage();*/
                                  } else {
                                    ScaffoldMessenger.of(context).showSnackBar(
                                        SnackBar(
                                            content: Text(
                                                "Generate an image first!")));
                                  }
                                },
                                label: Text("Share"))),
                      ],
                    )
                  ]),
            ),
          ],
        ),
      ),
    );
  }
}

// Web
downloadFile(url) {
  var anchorElement = html.AnchorElement(href: url);
  /*AnchorElement anchorElement = AnchorElement(href: url);*/
  anchorElement.download = "Salemalikom.png";
  anchorElement.click();
  anchorElement.remove();
}
